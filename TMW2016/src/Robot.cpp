// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveBase> Robot::driveBase;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveBase.reset(new DriveBase());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	driveBase->SetWheelbase(21.5/2, 22.75, 21.5/2);

	File = RAWCConstants::getInstance();
	driveBase->SetOffsets(File->getValueForKey("FLOff"), File->getValueForKey("FROff"), File->getValueForKey("RLOff"), File->getValueForKey("RROff"));


		//pdp=new PowerDistributionPanel();
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
	/******************Keeping Talons Alive*****************/
		if(oi->getDriverRight()->GetRawButton(8))
			DriveBaseSMDB();
		if(oi->getDriverRight()->GetRawButton(9))
			SystemSMDB();
		driveBase->SMDB();

}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();

}

void Robot::TeleopPeriodic() {
		if(oi->getDriverRight()->GetRawButton(8))
			DriveBaseSMDB();
		if(oi->getDriverRight()->GetRawButton(9))
			SystemSMDB();

		//Resets gyro to zero when crab starts
		if (!prevTrigger && oi->getDriverRight()->GetRawButton(1)) {
			driveBase->imu->ZeroYaw();
		}

		if (oi->getDriverRight()->GetRawButton(1)) {
			prevTrigger = true;
		}

	//	prevTrigger = oi->getDriverRight()->GetRawButton(1);
		if(oi->getDriverLeft()->GetRawButton(1))
			driveBase->Lock();

		else if(oi->getDriverLeft()->GetRawButton(1) && oi->getDriverRight()->GetMagnitude() < .1)
		{
			driveBase->Lock();
		}
		else if(oi->getDriverRight()->GetRawButton(1))
		{
			driveBase->Crab(oi->getJoystickTwist(),-oi->getJoystickY(),oi->getJoystickX(),true);
		}
		else if (oi->getDriverLeft()->GetRawButton(3)) {
			driveBase->Steer(3.14159,oi->getDriverLeft()->GetX(),2.1);
		}
		else
		{
			driveBase->Steer(oi->getLeftJoystickXRadians(),oi->getJoystickY(),.5);
		}


		driveBase->SMDB();
}

void Robot::TestPeriodic() {
	lw->Run();
}

void Robot::SystemSMDB() {
	//SmartDashboard::PutNumber("FrontLeftDriveCurrentPDP",pdp->GetCurrent(14));
	//SmartDashboard::PutNumber("RearLeftDriveCurrentPDP",pdp->GetCurrent(15));
	//SmartDashboard::PutNumber("FrontRightDriveCurrentPDP",pdp->GetCurrent(1));
	//SmartDashboard::PutNumber("RearRightDriveCurrentPDP",pdp->GetCurrent(0));
	std::cout << "Test1" << std::endl;
	SmartDashboard::PutNumber("FrontLeftSteerCurrentPDP",driveBase->frontLeftSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("FrontRightSteerCurrentPDP",driveBase->frontRightSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("RearLeftSteerCurrentPDP",driveBase->rearLeftSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("RearRightSteerCurrentPDP",driveBase->rearRightSteer->GetOutputCurrent());
	std::cout << "Test2" << std::endl;

	//SmartDashboard::PutNumber("IntakeCurrent(7)", pdp->GetCurrent(7));
	//SmartDashboard::PutNumber("IntakeCurrent(8)", pdp->GetCurrent(8));

	//SmartDashboard::PutNumber("TotalEnergy", pdp->GetTotalEnergy());

}

void Robot::DriveBaseSMDB() {
	SmartDashboard::PutNumber("DriverRightJoystickY",oi->getDriverRight()->GetRawAxis(1));
	SmartDashboard::PutNumber("FrontLeftSteerCurrent",driveBase->frontRightSteer->GetOutputCurrent());
	SmartDashboard::PutNumber("frontleftvolt",driveBase->frontLeftPos->GetAverageVoltage());
	SmartDashboard::PutNumber("rearleftvolt",driveBase->rearLeftPos->GetAverageVoltage());
	SmartDashboard::PutNumber("frontrightvolt",driveBase->frontRightPos->GetAverageVoltage());
	SmartDashboard::PutNumber("JoystickRadians", oi->getLeftJoystickXRadians());
}

START_ROBOT_CLASS(Robot);

