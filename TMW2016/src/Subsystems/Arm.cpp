// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Arm.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Arm::Arm() : Subsystem("Arm") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    dartLeft = RobotMap::armDartLeft;
    dartRight = RobotMap::armDartRight;
    comp = RobotMap::armComp;
    climbLeft = RobotMap::armClimbLeft;
    climbRight = RobotMap::armClimbRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Arm::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Arm::Darter(float speed) {
	dartLeft->Set(speed);
	dartRight->Set(speed);
}

void Arm::DartPosition(int pos) {
	dartLeft->SetControlMode(CANTalon::kPosition);
	dartRight->SetControlMode(CANTalon::kPosition);
	dartLeft->Set(pos);
	dartRight->Set(pos+10);
}

void Arm::DartSetToCurrent() {
	dartLeft->SetControlMode(CANTalon::kPosition);
	dartRight->SetControlMode(CANTalon::kPosition);
	dartLeft->Set(dartLeft->GetPosition());
	dartRight->Set(dartLeft->GetPosition()+10);

}

void Arm::DartOpenLoop(float speed) {
	dartLeft->SetControlMode(CANTalon::kPercentVbus);
	dartRight->SetControlMode(CANTalon::kPercentVbus);

	dartLeft->Set(speed);
	dartRight->Set(speed);
}

void Arm::ClimbExtend() {
	climbLeft->Set(true);
	climbRight->Set(true);
}

void Arm::ClimbRetract() {
	climbLeft->Set(false);
	climbRight->Set(false);
}
